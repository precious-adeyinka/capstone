#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chitchat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Initialize socket.io library with the server object instance
 */
var io = require('socket.io')(server);
 
 /**
 * Listen for every connection
 */
  io.on('connection', (socket) => {
    console.log('a user connected');
    // Assign Default Username
    socket.username = "Anonymous";
    io.emit('change_username', {'username': "Anonymous"});
    
    // Listen for username changed
    socket.on('change_username', (data)=>{
      console.log('Changing username to - ' + data.username);
      socket.username = data.username;  
      io.emit('change_username', {'username': data.username});
    });
    
    // Listen for new message
    socket.on('new_message', (data)=>{
      console.log('New Message - ' + data.message);
      io.emit('new_message', {'message': data.message, 'username': socket.username});      
    });
    
    // Listen for typing
    socket.on('typing', (data)=>{
      console.log(socket.username + ' is typing');
      socket.broadcast.emit('typing', {'username': socket.username}); 
      io.emit('typing', {'username': socket.username});
    });
    
    // Disconnect
    socket.on('disconnect', () => {
      console.log('user disconnected');
    });
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
